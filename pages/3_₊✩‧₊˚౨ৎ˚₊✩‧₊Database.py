import streamlit as st
import pandas as pd
import numpy as np

st.set_page_config(
    page_title="Dados",
    page_icon="üèÉüèº",
    layout="wide"
)

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import norm, binom

# T√≠tulo
st.title("An√°lise de Lucratividade de M√∫sicas no Spotify")

# Introdu√ß√£o
st.markdown("""
Disclaimer: 
        A an√°lise dos dados foi feita totalmente no Colab, sendo a vers√£o completa e mais confi√°vel neste link:
            https://colab.research.google.com/drive/1UDratcANHBPvHB9sfhSPBISDfPq9CUaU?usp=sharing            

Este projeto tem como objetivo analisar as caracter√≠sticas das m√∫sicas mais lucrativas do Spotify, como dan√ßabilidade, dura√ß√£o e positividade, para identificar padr√µes que levam ao sucesso financeiro.
""")

# Carregamento dos dados
dados = pd.read_csv("dataset.csv", sep=",")

# Exibi√ß√£o dos dados
st.subheader("Dados")
st.dataframe(dados.head())

# An√°lise de Dan√ßabilidade
st.subheader("An√°lise de Dan√ßabilidade")
st.markdown("""
A dan√ßabilidade √© uma m√©trica que varia de 0 a 1, indicando o qu√£o adequada uma m√∫sica √© para dan√ßar. Vamos analisar como a dan√ßabilidade influencia a lucratividade das m√∫sicas.
""")

# M√©dia de dan√ßabilidade
n_danceability_mean = dados['danceability'].mean()
st.write(f"M√©dia de dan√ßabilidade: {n_danceability_mean:.2f}")

# Gr√°fico de distribui√ß√£o de dan√ßabilidade
st.markdown("### Distribui√ß√£o de Dan√ßabilidade")
fig, ax = plt.subplots()
sns.boxplot(y=dados['danceability'], ax=ax)
st.pyplot(fig)

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# T√≠tulo
st.title("An√°lise de Lucratividade por Faixa de Dan√ßabilidade")

# Carregar os dados (substitua pelo seu DataFrame)
dados = pd.read_csv("dataset.csv", sep=",")

# Explica√ß√£o em Markdown
st.markdown("""
### An√°lise de Dan√ßabilidade vs Lucratividade
Abaixo est√° o gr√°fico que mostra a lucratividade m√©dia por faixa de dan√ßabilidade.
""")

# Criar as faixas de dan√ßabilidade
bins = np.arange(0, 1.1, 0.1)  # 0.0 to 1.0 em passos de 0.1
labels = [f"{round(bins[i], 1)}-{round(bins[i+1], 1)}" for i in range(len(bins)-1)]

# Atribuir cada m√∫sica a uma faixa de dan√ßabilidade
dados['danceability_range'] = pd.cut(dados['danceability'], bins=bins, labels=labels, include_lowest=True)

# Agrupar por faixa de dan√ßabilidade e calcular a lucratividade m√©dia
danceability_profit = dados.groupby('danceability_range')['profit'].mean().reset_index()

# Criar o gr√°fico
fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(data=danceability_profit, x='danceability_range', y='profit', marker='o', color='b', ax=ax)

# Configura√ß√µes do gr√°fico
ax.set_xlabel('Faixa de Dan√ßabilidade')
ax.set_ylabel('Lucratividade M√©dia')
ax.set_title('Lucratividade M√©dia por Faixa de Dan√ßabilidade')
plt.xticks(rotation=45)
ax.grid(True)

# Exibir o gr√°fico no Streamlit
st.pyplot(fig)

st.markdown("""
### Conclus√£o sobre Dan√ßabilidade e Lucratividade

Bom, podemos ver que o **range de 0.5-0.6 de dan√ßabilidade** √© o melhor para obtermos lucro, chegando a uma m√©dia de **1300**.

Podemos tamb√©m ver que √© uma **distribui√ß√£o assim√©trica** com **concentra√ß√£o √† direita** e **calda √† esquerda**.
""")

# An√°lise de Dura√ß√£o
st.subheader("An√°lise de Dura√ß√£o")
st.markdown("""
A dura√ß√£o das m√∫sicas √© medida em milissegundos. Vamos analisar como a dura√ß√£o influencia a lucratividade.
""")

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter

# T√≠tulo
st.title("Gr√°fico de Dispers√£o: Dura√ß√£o vs Lucratividade")

# Carregar os dados (substitua pelo seu DataFrame)
dados = pd.read_csv("dataset.csv", sep=",")

# Explica√ß√£o em Markdown
st.markdown("""
### An√°lise de Dura√ß√£o vs Lucratividade
Abaixo est√° o gr√°fico de dispers√£o que mostra a rela√ß√£o entre a dura√ß√£o das m√∫sicas (em minutos) e a lucratividade.
""")

# Criar o gr√°fico
fig, ax = plt.subplots(figsize=(8, 5))
sns.scatterplot(y=dados['profit'], x=dados['duration_ms'], color='blue', alpha=0.7, ax=ax)

# Fun√ß√£o para formatar os valores em minutos
def minutos(x, pos):
    return f'{x/60000:.1f}'  # Converter para minutos e exibir com 1 casa decimal

# Aplicar a formata√ß√£o ao eixo x
formatter = FuncFormatter(minutos)
ax.xaxis.set_major_formatter(formatter)  # Formatar eixo x

# Ajustar o intervalo do eixo X entre 0 e 7 minutos (0 a 420.000 ms)
ax.set_xlim(0, 420000)  # Limite entre 0 e 420.000 milissegundos (7 minutos)

# Configura√ß√µes do gr√°fico
ax.set_xlabel("Dura√ß√£o da M√∫sica (minutos)")
ax.set_ylabel("Lucratividade (em milhares)")
ax.set_title("Rela√ß√£o entre Dura√ß√£o da M√∫sica e Lucratividade")
ax.grid(True)

# Exibir o gr√°fico no Streamlit
st.pyplot(fig)

st.markdown("""
### An√°lise de Dura√ß√£o vs Lucratividade

Como podemos ver, as dura√ß√µes com maior lucratividade est√£o entre **2.5 e 4.2 minutos**. Os dados est√£o distribu√≠dos de forma homog√™nea, com uma **calda √† esquerda** devido √† exclus√£o dos dados com dura√ß√£o igual a 0.
""")

# An√°lise de Positividade (Valence)
st.subheader("An√°lise de Positividade (Valence)")
st.markdown("""
A positividade (valence) √© uma m√©trica que varia de 0 a 1, indicando o qu√£o positiva √© uma m√∫sica. Vamos analisar como a positividade influencia a lucratividade.
H√° uma distribui√ß√£o assim√©trica com concentra√ß√£o √† esquerda e cauda a direita.
            """)

# Gr√°fico de linha: Positividade vs Lucratividade
st.markdown("### Positividade vs Lucratividade")
bins = np.arange(0, 1.1, 0.1)
labels = [f"{round(bins[i], 1)}-{round(bins[i+1], 1)}" for i in range(len(bins)-1)]
dados['valence_range'] = pd.cut(dados['valence'], bins=bins, labels=labels, include_lowest=True)
valence_profit = dados.groupby('valence_range')['profit'].mean().reset_index()

fig, ax = plt.subplots()
sns.lineplot(data=valence_profit, x='valence_range', y='profit', marker='o', color='b', ax=ax)
ax.set_xlabel("Faixa de Positividade")
ax.set_ylabel("Lucratividade M√©dia")
ax.set_title("Lucratividade M√©dia por Faixa de Positividade")
plt.xticks(rotation=45)
st.pyplot(fig)

# Distribui√ß√£o Normal e Binomial
st.subheader("Distribui√ß√£o Normal e Binomial")
st.markdown("""
A probabilidade de o lucro ser acima de 3000 √© muito baixa, e abaixo de 0 tamb√©m. J√° de cerca de 1000 √† 1800 √© bem alta, sendo o seu pico.
""")

# Distribui√ß√£o Normal
st.markdown("### Distribui√ß√£o Normal")
mu = dados['profit'].mean()
sigma = dados['profit'].std()
x = np.linspace(mu - 4*sigma, mu + 4*sigma, 100)
pdf = norm.pdf(x, mu, sigma)
cdf = norm.cdf(x, mu, sigma)

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))
sns.lineplot(x=x, y=pdf, color='blue', ax=ax1)
ax1.set_title("PDF (Fun√ß√£o de Densidade de Probabilidade)")
ax1.set_xlabel("Lucro")
ax1.set_ylabel("Densidade")

sns.lineplot(x=x, y=cdf, color='red', ax=ax2)
ax2.set_title("CDF (Fun√ß√£o de Distribui√ß√£o Acumulada)")
ax2.set_xlabel("Lucro")
ax2.set_ylabel("Probabilidade Acumulada")

st.pyplot(fig)

# Distribui√ß√£o Binomial
st.markdown("### Distribui√ß√£o Binomial")
n = 10  # N√∫mero de tentativas
k = 5   # N√∫mero de sucessos
p = 0.41  # Probabilidade de sucesso

x = np.arange(0, n + 1)
y = binom.pmf(x, n, p)
df_binomial = pd.DataFrame({"X": x, "P(X)": y, "P(X ‚â§ k) (Acumulado)": np.cumsum(y)}).set_index("X")

st.write("Tabela de Probabilidades:")
st.dataframe(df_binomial)

fig, ax = plt.subplots()
sns.barplot(x=x, y=y, color='blue', alpha=0.7, ax=ax)
ax.set_title("Distribui√ß√£o Binomial")
ax.set_xlabel("N√∫mero de Sucessos")
ax.set_ylabel("Probabilidade")
st.pyplot(fig)

st.markdown("""
Utilizei a distribui√ß√£o binomial para descobrir as chances das can√ß√µes terem sucesso financeiro ou n√£o as vezes que consegui os resultados que eu quero √© 46674 e as tentativas totais foram 114000, ent√£o a probabilidade √© 40,94%, e o numero de sucesso √© acima de 1552.26. - a distribui√ß√£o binomial calcula essa probabilidade de conseguir com x tentativas, os numeros foram substituidos por seus equivalentes.

n_max = 50 - A quantidade de tentativas m√°xima √© 50

n = 10 - o n√∫mero de tentativas setado √© 10

k = 1552.26 √© o valor definido como sucesso, sendo cerca de 50% do valor total, portanto, o valor desse par√¢metro √© 5.

p = 0.41 pois a probabilidade de atingir lucro √© de 41%

Portanto com 10 tentativas, a probabilidade de atingir 2 com sucesso √© de 0.10 e de atingir 4 com sucesso √© a maior, 0,25%.

""")


# Conclus√£o
st.subheader("Conclus√£o")
st.markdown("""
Com base na an√°lise, podemos concluir que:
- M√∫sicas com dan√ßabilidade entre 0.5 e 0.6 tendem a ser mais lucrativas.
- Dura√ß√µes entre 2.5 e 4.2 minutos s√£o as mais lucrativas.
- A positividade (valence) tem um impacto moderado na lucratividade, com valores m√©dios sendo mais eficazes.
""")